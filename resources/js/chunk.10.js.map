{"version":3,"sources":["webpack:///./packages/pyro/platform/lib/utils/generateVueCodeCompletion.ts","webpack:///./packages/pyro/platform/lib/utils/mergeChildPrototypes.ts"],"names":[],"mappings":"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","file":"js/chunk.10.js","sourcesContent":["import Vue, { PropOptions } from 'vue';\nimport { mergeChildPrototypes } from './mergeChildPrototypes';\nimport { camelCase, capitalize, kebabCase } from 'lodash';\nimport { Component } from 'vue/types/options';\nconst log = require('debug')('utils:generatevuecode');\n\nfunction getPlugin() {\n    let plugins = getPlugins()\n    for ( let plugin of plugins ) {\n        if ( plugin.NAME && plugin.NAME === '@crvs/admin' ) {\n            return plugin;\n        }\n    }\n    console.dir({ plugins })\n    throw new Error('not found plugin')\n}\n\nfunction getPlugins() {\n    return Vue[ '_installedPlugins' ] as any[]\n}\n\nfunction getComponentsFromPlugin(plugin): Array<typeof Vue> {\n\n    let components: Array<typeof Vue> = []\n    Object.keys(plugin).forEach(key => {\n        let val = plugin[ key ]\n        if ( val && val.name && val.name === 'VueComponent' ) {\n            components.push(val)\n        }\n    })\n    return components\n}\n\n// type Props = Record<string, PropOptions<any>>;\n//\n// interface Transformer {\n//     id:string\n//     transform(data: { name: string, props: Props, component: Component }): string\n//\n//     finalize(transformed: string[]): string\n// }\n//\n// export class CompletionGenerator {\n//     transformers: Transformer[]\n//\n//     register(transformer: Transformer) {\n//         this.transformers.push(transformer)\n//     }\n//\n//     generate() {\n//         for ( const transformer of this.transformers ) {\n//             for ( const component of this.getComponents() ) {\n//                 transformer.transform(component)\n//             }\n//         }\n//     }\n//\n//     getComponents(): Array<{ name: string, props: Props, component: Component }> {\n//         let components     = mergeChildPrototypes(Vue.options.components)\n//         let componentNames = Object.keys(components);\n//\n//         return componentNames.map(name => {\n//             let component = components[ name ];\n//             let props     = component?.options?.props ?? component.props\n//             return { name, component, props }\n//         });\n//     }\n// }\n//\n// export class VueCompletionTransformer implements Transformer {\n//     id = 'vue'\n//     public transform(data: { name: string; props: Props; component: Component }): string {\n//\n//     }\n//\n//     public finalize(transformed: string[]): string {\n//\n//     }\n// }\n\nfunction transformPropsData(props: Record<string, PropOptions<any>>) {\n    let propNames = Object.keys(props);\n    for ( let name of propNames ) {\n        let prop = props[ name ];\n    }\n    return propNames.map(name => {\n        let prop = props[ name ];\n        // log('transformPropsData', name, { propNames, prop });\n\n        let type = ``;\n        if ( prop.type && prop.type[ 'name' ] ) {\n            type = `type: ${prop.type[ 'name' ]},`\n        }\n\n        let def = ``\n        if ( prop.default ) {\n            def = `default: ${JSON.stringify(prop.default)},`\n        }\n\n        let out = `\n${name}: {\n    ${def}\n    ${type}\n}`;\n\n        return out;\n    })\n    // props.asdf.type.name.string()\n}\n\nfunction transformPropsDataJsx(props: Record<string, PropOptions<any>>) {\n    let propNames = Object.keys(props);\n    for ( let name of propNames ) {\n        let prop = props[ name ];\n    }\n    return propNames.map(name => {\n        let prop = props[ name ];\n        // log('transformPropsData', name, { propNames, prop });\n\n        let type = `any`;\n        if ( prop.type && prop.type[ 'name' ] ) {\n            type = prop.type[ 'name' ].toLowerCase();\n        }\n        if(type === 'function'){\n            type = 'Function'\n        }\n        if(type === 'array'){\n            type = 'Array<any>'\n        }\n\n        name = camelCase(name)\n\n        return `'${name}'?: ${type}`;\n    })\n    // props.asdf.type.name.string()\n}\n\nfunction generate() {\n    // let _plugin    = getPlugin()\n    let components = mergeChildPrototypes(Vue.options.components)\n    // let plugins    = getPlugins().filter(plugin => plugin.NAME !== _plugin.NAME)\n    // for ( let plugin of plugins ) {\n    //     components.push(...getComponentsFromPlugin(plugin));\n    // }\n\n    log({ components })\n    let generated = []\n    let jsx = []\n    Object.keys(components).forEach(key => {\n        let c    = components[ key ];\n        let name = kebabCase(key);\n\n        if ( key.startsWith('El') ) {\n            name = key\n        } else if ( key.startsWith('el-') ) {\n            name = capitalize(camelCase(key))\n        }\n        // if ( c[ 'options' ] && c[ 'options' ][ 'props' ] ) {\n        //     generated.push({\n        //         name,\n        //         props: transformPropsData(c[ 'options' ][ 'props' ] as any)\n        //     })\n        // } else if ( c[ 'props' ] ) {\n        //     generated.push({\n        //         name,\n        //         props: transformPropsData(c[ 'props' ] as any)\n        //     })\n        // }\n        generated.push({ name, props: transformPropsData(c?.options?.props ?? (c.props || {})) })\n        jsx.push({name: kebabCase(key), props: transformPropsDataJsx(c?.options?.props ?? (c.props || {}))})\n        log('generated', key, { name, c })\n    })\n    // p.components[1].options.props.value.type.name.toString()\n\n    let jsxLines = jsx.map(gen => `\"${gen.name}\"?: TsxComponentAttrs<{ \\n${gen.props.join('\\n')}\\n }>`)\n\n    let lines = generated.map(gen => {\n        let prop = gen.props.join(',')\n        return `Vue.component('${gen.name}', {\n    props: {\n        ${prop}\n    }\n});\\n`\n    })\n\n    lines.unshift('import Vue from \"vue\";')\n    let result    = lines.join('\\n');\n    let getResult = () => result.replace('↵', '\\n');\n    console.log(result)\n\n    let jsxResult = jsxLines.join(\"\\n\")\n    let getJsxResult = () => jsxResult.replace('↵', '\\n');\n    return { components, lines, result, getResult, jsxResult, getJsxResult };\n}\n\n\nexport async function generateVueCodeCompletion(){\n    const ElementUI = await import('element-ui')\n    Vue.use(ElementUI, {locale:'nl'});\n    return generate();\n}","export function mergeChildPrototypes(val:any){\n    let value=val;\n    let result = value ? {...value} : {}\n    while(value !== null){\n        result = {...result, ...value}\n        value = Object.getPrototypeOf(value)\n    }\n    return result;\n}"],"sourceRoot":""}